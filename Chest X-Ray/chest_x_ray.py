# -*- coding: utf-8 -*-
"""Chest X-Ray.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TsO1_hobcwEmB7qU2X7EJdrpw6zewbvC
"""

from google.colab import files
files.upload()  # Upload the `kaggle.json` file you just downloaded.

!pip install -q kaggle                # Install Kaggle API
!mkdir -p ~/.kaggle                   # Create the .kaggle directory
!cp kaggle.json ~/.kaggle/            # Copy the API key
!chmod 600 ~/.kaggle/kaggle.json      # Set permissions

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia
!unzip chest-xray-pneumonia.zip       # Unzip the dataset

!pip install tensorflow keras numpy matplotlib
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2)
test_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    '/content/chest_xray/train/',
    target_size=(150, 150),  # Smaller than 224x224 for faster training
    batch_size=32,
    class_mode='binary'
)

test_data = test_datagen.flow_from_directory(
    '/content/chest_xray/test/',
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary'
)

# Step 3: Build a Simple CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary classification
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Step 4: Train the Model
history = model.fit(
    train_data,
    epochs=10,  # Reduce if Colab disconnects
    validation_data=test_data
)

# Step 5: Evaluate Accuracy & Other Metrics
from sklearn.metrics import classification_report, confusion_matrix

# Predict on test data
test_data.reset()  # Reset generator to avoid shuffling issues
predictions = model.predict(test_data, steps=len(test_data))
y_pred = (predictions > 0.5).astype(int)  # Convert probabilities to binary labels

# True labels
y_true = test_data.classes

# Calculate metrics
print("\nðŸ“Š Classification Report:")
print(classification_report(y_true, y_pred, target_names=['Normal', 'Pneumonia']))

print("\nðŸ”¢ Confusion Matrix:")
print(confusion_matrix(y_true, y_pred))

# Step 6: Plot Training History (Accuracy/Loss)
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
plt.imshow(plt.imread('/content/chest_xray/train/PNEUMONIA/person1320_bacteria_3352.jpeg'))
plt.title("X-ray")
plt.show()

