# -*- coding: utf-8 -*-
"""Brain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Yw0TNu7o6Zv8sHdF1SmXdm8PF-xRDJo
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d navoneel/brain-mri-images-for-brain-tumor-detection

!unzip brain-mri-images-for-brain-tumor-detection.zip

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Dataset directories
tumor_dir = 'yes'
no_tumor_dir = 'no'

data = []
labels = []

# Load Tumor images (label = 1)
for img in os.listdir(tumor_dir):
    img_path = os.path.join(tumor_dir, img)
    img_array = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img_array = cv2.resize(img_array, (128, 128))
    data.append(img_array)
    labels.append(1)

# Load No Tumor images (label = 0)
for img in os.listdir(no_tumor_dir):
    img_path = os.path.join(no_tumor_dir, img)
    img_array = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img_array = cv2.resize(img_array, (128, 128))
    data.append(img_array)
    labels.append(0)

# Convert to NumPy array
data = np.array(data)
labels = np.array(labels)

# Normalize pixel values
data = data / 255.0

# Reshape for CNN input
data = data.reshape(-1, 128, 128, 1)

# Split into train/test
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128,128,1)),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

loss, acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {acc*100:.2f}%")

# Train the model
history = model.fit(X_train, y_train, epochs=10, validation_split=0.2, batch_size=32)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

import cv2
import matplotlib.pyplot as plt

def predict_image(img_path):
    # Read and preprocess image
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img_resized = cv2.resize(img, (128, 128))
    img_normalized = img_resized / 255.0
    img_reshaped = img_normalized.reshape(1, 128, 128, 1)

    # Predict
    prediction = model.predict(img_reshaped)[0][0]

    # Show image
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    plt.title("Brain MRI Scan")
    plt.show()

    # Print result
    if prediction > 0.5:
        print("Prediction: ðŸš¨ Tumor Detected")
    else:
        print("Prediction: âœ… No Tumor")

# Example usage
predict_image('no/no 10.jpg')

